//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18444
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace PerfFeedback.Client.PerfLocal {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="PerfLocal.ICoWorkerService")]
    public interface ICoWorkerService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICoWorkerService/AddCoWorker", ReplyAction="http://tempuri.org/ICoWorkerService/AddCoWorkerResponse")]
        PerfFeedback.BusinessService.Contract.CoWorker AddCoWorker(PerfFeedback.BusinessService.Contract.CoWorker coWorker);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICoWorkerService/AddCoWorker", ReplyAction="http://tempuri.org/ICoWorkerService/AddCoWorkerResponse")]
        System.Threading.Tasks.Task<PerfFeedback.BusinessService.Contract.CoWorker> AddCoWorkerAsync(PerfFeedback.BusinessService.Contract.CoWorker coWorker);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICoWorkerService/UpdateCoWorker", ReplyAction="http://tempuri.org/ICoWorkerService/UpdateCoWorkerResponse")]
        PerfFeedback.BusinessService.Contract.CoWorker UpdateCoWorker(PerfFeedback.BusinessService.Contract.CoWorker coWorker);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICoWorkerService/UpdateCoWorker", ReplyAction="http://tempuri.org/ICoWorkerService/UpdateCoWorkerResponse")]
        System.Threading.Tasks.Task<PerfFeedback.BusinessService.Contract.CoWorker> UpdateCoWorkerAsync(PerfFeedback.BusinessService.Contract.CoWorker coWorker);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICoWorkerService/GetCoWorker", ReplyAction="http://tempuri.org/ICoWorkerService/GetCoWorkerResponse")]
        PerfFeedback.BusinessService.Contract.CoWorker GetCoWorker(long coWorkerId, string name);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICoWorkerService/GetCoWorker", ReplyAction="http://tempuri.org/ICoWorkerService/GetCoWorkerResponse")]
        System.Threading.Tasks.Task<PerfFeedback.BusinessService.Contract.CoWorker> GetCoWorkerAsync(long coWorkerId, string name);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICoWorkerService/GetAllCoWorkers", ReplyAction="http://tempuri.org/ICoWorkerService/GetAllCoWorkersResponse")]
        PerfFeedback.BusinessService.Contract.CoWorker[] GetAllCoWorkers();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICoWorkerService/GetAllCoWorkers", ReplyAction="http://tempuri.org/ICoWorkerService/GetAllCoWorkersResponse")]
        System.Threading.Tasks.Task<PerfFeedback.BusinessService.Contract.CoWorker[]> GetAllCoWorkersAsync();
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ICoWorkerServiceChannel : PerfFeedback.Client.PerfLocal.ICoWorkerService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class CoWorkerServiceClient : System.ServiceModel.ClientBase<PerfFeedback.Client.PerfLocal.ICoWorkerService>, PerfFeedback.Client.PerfLocal.ICoWorkerService {
        
        public CoWorkerServiceClient() {
        }
        
        public CoWorkerServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public CoWorkerServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public CoWorkerServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public CoWorkerServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public PerfFeedback.BusinessService.Contract.CoWorker AddCoWorker(PerfFeedback.BusinessService.Contract.CoWorker coWorker) {
            return base.Channel.AddCoWorker(coWorker);
        }
        
        public System.Threading.Tasks.Task<PerfFeedback.BusinessService.Contract.CoWorker> AddCoWorkerAsync(PerfFeedback.BusinessService.Contract.CoWorker coWorker) {
            return base.Channel.AddCoWorkerAsync(coWorker);
        }
        
        public PerfFeedback.BusinessService.Contract.CoWorker UpdateCoWorker(PerfFeedback.BusinessService.Contract.CoWorker coWorker) {
            return base.Channel.UpdateCoWorker(coWorker);
        }
        
        public System.Threading.Tasks.Task<PerfFeedback.BusinessService.Contract.CoWorker> UpdateCoWorkerAsync(PerfFeedback.BusinessService.Contract.CoWorker coWorker) {
            return base.Channel.UpdateCoWorkerAsync(coWorker);
        }
        
        public PerfFeedback.BusinessService.Contract.CoWorker GetCoWorker(long coWorkerId, string name) {
            return base.Channel.GetCoWorker(coWorkerId, name);
        }
        
        public System.Threading.Tasks.Task<PerfFeedback.BusinessService.Contract.CoWorker> GetCoWorkerAsync(long coWorkerId, string name) {
            return base.Channel.GetCoWorkerAsync(coWorkerId, name);
        }
        
        public PerfFeedback.BusinessService.Contract.CoWorker[] GetAllCoWorkers() {
            return base.Channel.GetAllCoWorkers();
        }
        
        public System.Threading.Tasks.Task<PerfFeedback.BusinessService.Contract.CoWorker[]> GetAllCoWorkersAsync() {
            return base.Channel.GetAllCoWorkersAsync();
        }
    }
}
